// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: sellers.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const deleteSellerAccount = `-- name: DeleteSellerAccount :exec
delete from sellers where id = $1
`

func (q *Queries) DeleteSellerAccount(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteSellerAccount, id)
	return err
}

const getSellerBankDetails = `-- name: GetSellerBankDetails :one
select id, bank_account_holder_name, bank_account_number, ifsc_code, created_at, updated_at from sellers where id = $1
`

type GetSellerBankDetailsRow struct {
	ID                    string
	BankAccountHolderName string
	BankAccountNumber     string
	IfscCode              string
	CreatedAt             time.Time
	UpdatedAt             time.Time
}

func (q *Queries) GetSellerBankDetails(ctx context.Context, id string) (GetSellerBankDetailsRow, error) {
	row := q.db.QueryRowContext(ctx, getSellerBankDetails, id)
	var i GetSellerBankDetailsRow
	err := row.Scan(
		&i.ID,
		&i.BankAccountHolderName,
		&i.BankAccountNumber,
		&i.IfscCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSellerContactInfo = `-- name: GetSellerContactInfo :one
select sellers.id,
users.email, 
users.phone_number, 
sellers.created_at, 
sellers.updated_at 
from sellers join users on sellers.user_id = users.id where sellers.id = $1
`

type GetSellerContactInfoRow struct {
	ID          string
	Email       string
	PhoneNumber string
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) GetSellerContactInfo(ctx context.Context, id string) (GetSellerContactInfoRow, error) {
	row := q.db.QueryRowContext(ctx, getSellerContactInfo, id)
	var i GetSellerContactInfoRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSellerTaxAndAddressInfo = `-- name: GetSellerTaxAndAddressInfo :one
select id, gst_number, pan_number, pickup_address, created_at, updated_at from sellers where id = $1
`

type GetSellerTaxAndAddressInfoRow struct {
	ID            string
	GstNumber     string
	PanNumber     string
	PickupAddress string
	CreatedAt     time.Time
	UpdatedAt     time.Time
}

func (q *Queries) GetSellerTaxAndAddressInfo(ctx context.Context, id string) (GetSellerTaxAndAddressInfoRow, error) {
	row := q.db.QueryRowContext(ctx, getSellerTaxAndAddressInfo, id)
	var i GetSellerTaxAndAddressInfoRow
	err := row.Scan(
		&i.ID,
		&i.GstNumber,
		&i.PanNumber,
		&i.PickupAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStoreID = `-- name: GetStoreID :one
select id from stores where owner_id = $1
`

func (q *Queries) GetStoreID(ctx context.Context, ownerID string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getStoreID, ownerID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const registerSeller = `-- name: RegisterSeller :one
insert into sellers(
    id,
    gst_number,
    pan_number,
    pickup_address,
    bank_account_holder_name,
    bank_account_number,
    ifsc_code,
    user_id,
    created_at,
    updated_at
) values (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    NOW(),
    NOW()
)
returning id, user_id, gst_number, pan_number, pickup_address, bank_account_holder_name, bank_account_number, ifsc_code, created_at, updated_at
`

type RegisterSellerParams struct {
	ID                    string
	GstNumber             string
	PanNumber             string
	PickupAddress         string
	BankAccountHolderName string
	BankAccountNumber     string
	IfscCode              string
	UserID                uuid.UUID
}

func (q *Queries) RegisterSeller(ctx context.Context, arg RegisterSellerParams) (Seller, error) {
	row := q.db.QueryRowContext(ctx, registerSeller,
		arg.ID,
		arg.GstNumber,
		arg.PanNumber,
		arg.PickupAddress,
		arg.BankAccountHolderName,
		arg.BankAccountNumber,
		arg.IfscCode,
		arg.UserID,
	)
	var i Seller
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GstNumber,
		&i.PanNumber,
		&i.PickupAddress,
		&i.BankAccountHolderName,
		&i.BankAccountNumber,
		&i.IfscCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSellerBankDetails = `-- name: UpdateSellerBankDetails :one
update sellers set bank_account_holder_name = $1, bank_account_number = $2, ifsc_code = $3, updated_at = NOW() where id = $4
returning id, bank_account_holder_name, bank_account_number, ifsc_code, created_at, updated_at
`

type UpdateSellerBankDetailsParams struct {
	BankAccountHolderName string
	BankAccountNumber     string
	IfscCode              string
	ID                    string
}

type UpdateSellerBankDetailsRow struct {
	ID                    string
	BankAccountHolderName string
	BankAccountNumber     string
	IfscCode              string
	CreatedAt             time.Time
	UpdatedAt             time.Time
}

func (q *Queries) UpdateSellerBankDetails(ctx context.Context, arg UpdateSellerBankDetailsParams) (UpdateSellerBankDetailsRow, error) {
	row := q.db.QueryRowContext(ctx, updateSellerBankDetails,
		arg.BankAccountHolderName,
		arg.BankAccountNumber,
		arg.IfscCode,
		arg.ID,
	)
	var i UpdateSellerBankDetailsRow
	err := row.Scan(
		&i.ID,
		&i.BankAccountHolderName,
		&i.BankAccountNumber,
		&i.IfscCode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateSellerTaxAndAddress = `-- name: UpdateSellerTaxAndAddress :one
update sellers set gst_number = $1, pan_number = $2, pickup_address = $3, updated_at = NOW() where id = $4
returning id, gst_number, pan_number, pickup_address, created_at, updated_at
`

type UpdateSellerTaxAndAddressParams struct {
	GstNumber     string
	PanNumber     string
	PickupAddress string
	ID            string
}

type UpdateSellerTaxAndAddressRow struct {
	ID            string
	GstNumber     string
	PanNumber     string
	PickupAddress string
	CreatedAt     time.Time
	UpdatedAt     time.Time
}

func (q *Queries) UpdateSellerTaxAndAddress(ctx context.Context, arg UpdateSellerTaxAndAddressParams) (UpdateSellerTaxAndAddressRow, error) {
	row := q.db.QueryRowContext(ctx, updateSellerTaxAndAddress,
		arg.GstNumber,
		arg.PanNumber,
		arg.PickupAddress,
		arg.ID,
	)
	var i UpdateSellerTaxAndAddressRow
	err := row.Scan(
		&i.ID,
		&i.GstNumber,
		&i.PanNumber,
		&i.PickupAddress,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
