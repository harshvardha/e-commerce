// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: categories.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createCategory = `-- name: CreateCategory :one
insert into categories(id, name, description, created_at, updated_at)
values(
    gen_random_uuid(),
    $1,
    $2,
    NOW(),
    NOW()
)
returning id, name, description, created_at, updated_at
`

type CreateCategoryParams struct {
	Name        string
	Description string
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory, arg.Name, arg.Description)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCateogryInformation = `-- name: GetCateogryInformation :one
select name, description, created_at, updated_at from categories where id = $1
`

type GetCateogryInformationRow struct {
	Name        string
	Description string
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) GetCateogryInformation(ctx context.Context, id uuid.UUID) (GetCateogryInformationRow, error) {
	row := q.db.QueryRowContext(ctx, getCateogryInformation, id)
	var i GetCateogryInformationRow
	err := row.Scan(
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const removeCategory = `-- name: RemoveCategory :exec
delete from categories where id = $1
`

func (q *Queries) RemoveCategory(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removeCategory, id)
	return err
}

const updateCategory = `-- name: UpdateCategory :one
update categories set name = $1, description = $2, updated_at = NOW() where id = $3
returning name, description, created_at, updated_at
`

type UpdateCategoryParams struct {
	Name        string
	Description string
	ID          uuid.UUID
}

type UpdateCategoryRow struct {
	Name        string
	Description string
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (UpdateCategoryRow, error) {
	row := q.db.QueryRowContext(ctx, updateCategory, arg.Name, arg.Description, arg.ID)
	var i UpdateCategoryRow
	err := row.Scan(
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
