// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: refresh_token.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :exec
insert into refresh_token(token, user_id, expires_at, created_at, updated_at)
values(
    $1,
    $2,
    $3,
    NOW(),
    NOW()
)
`

type CreateRefreshTokenParams struct {
	Token     string
	UserID    uuid.UUID
	ExpiresAt time.Time
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, createRefreshToken, arg.Token, arg.UserID, arg.ExpiresAt)
	return err
}

const getRefreshToken = `-- name: GetRefreshToken :one
select token, user_id, expires_at, created_at, updated_at from refresh_token
`

func (q *Queries) GetRefreshToken(ctx context.Context) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshToken)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.UserID,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateRefreshToken = `-- name: UpdateRefreshToken :exec
update refresh_token set token = $1, updated_at = NOW() where user_id = $2
`

type UpdateRefreshTokenParams struct {
	Token  string
	UserID uuid.UUID
}

func (q *Queries) UpdateRefreshToken(ctx context.Context, arg UpdateRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateRefreshToken, arg.Token, arg.UserID)
	return err
}
