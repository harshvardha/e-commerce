// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: states.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createState = `-- name: CreateState :one
insert into states(id, name, created_at, updated_at)
values(
    gen_random_uuid(),
    $1,
    NOW(),
    NOW()
)
returning id, name, created_at, updated_at
`

func (q *Queries) CreateState(ctx context.Context, name string) (State, error) {
	row := q.db.QueryRowContext(ctx, createState, name)
	var i State
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllStates = `-- name: GetAllStates :many
select id, name, created_at, updated_at from states
`

func (q *Queries) GetAllStates(ctx context.Context) ([]State, error) {
	rows, err := q.db.QueryContext(ctx, getAllStates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []State
	for rows.Next() {
		var i State
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStateName = `-- name: GetStateName :one
select name from states where id = $1
`

func (q *Queries) GetStateName(ctx context.Context, id uuid.UUID) (string, error) {
	row := q.db.QueryRowContext(ctx, getStateName, id)
	var name string
	err := row.Scan(&name)
	return name, err
}

const removeState = `-- name: RemoveState :exec
delete from states where id = $1
`

func (q *Queries) RemoveState(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removeState, id)
	return err
}

const updateState = `-- name: UpdateState :one
update states set name = $1, updated_at = NOW() where id = $2
returning name, created_at, updated_at
`

type UpdateStateParams struct {
	Name string
	ID   uuid.UUID
}

type UpdateStateRow struct {
	Name      string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) UpdateState(ctx context.Context, arg UpdateStateParams) (UpdateStateRow, error) {
	row := q.db.QueryRowContext(ctx, updateState, arg.Name, arg.ID)
	var i UpdateStateRow
	err := row.Scan(&i.Name, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}
