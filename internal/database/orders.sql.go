// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: orders.sql

package database

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

const addProductToOrder = `-- name: AddProductToOrder :exec
insert into orders_users_products(order_id, user_id, product_id, quantity, created_at, updated_at)
values(
    $1,
    $2,
    $3,
    $4,
    NOW(),
    NOW()
)
`

type AddProductToOrderParams struct {
	OrderID   uuid.UUID
	UserID    uuid.UUID
	ProductID uuid.UUID
	Quantity  int32
}

func (q *Queries) AddProductToOrder(ctx context.Context, arg AddProductToOrderParams) error {
	_, err := q.db.ExecContext(ctx, addProductToOrder,
		arg.OrderID,
		arg.UserID,
		arg.ProductID,
		arg.Quantity,
	)
	return err
}

const createOrder = `-- name: CreateOrder :one
insert into orders(id, total_value, seller_id, status, created_at, updated_at)
values(
    gen_random_uuid(),
    $1,
    $2,
    $3,
    NOW(),
    NOW()
)
returning id, total_value, seller_id, created_at, updated_at, status
`

type CreateOrderParams struct {
	TotalValue float64
	SellerID   string
	Status     uuid.UUID
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder, arg.TotalValue, arg.SellerID, arg.Status)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.TotalValue,
		&i.SellerID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Status,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
delete from orders where id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, id)
	return err
}

const getAllOrders = `-- name: GetAllOrders :many
select orders_users_products.order_id, products.name, products.image_urls from orders_users_products join products on orders_users_products.product_id = products.id where user_id = $1
`

type GetAllOrdersRow struct {
	OrderID   uuid.UUID
	Name      string
	ImageUrls json.RawMessage
}

func (q *Queries) GetAllOrders(ctx context.Context, userID uuid.UUID) ([]GetAllOrdersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllOrders, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllOrdersRow
	for rows.Next() {
		var i GetAllOrdersRow
		if err := rows.Scan(&i.OrderID, &i.Name, &i.ImageUrls); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderDetails = `-- name: GetOrderDetails :many
select products.name, products.description, products.price, products.image_urls, orders_users_products.quantity from orders_users_products join products on orders_users_products.product_id = products.id where orders_users_products.user_id = $1 and orders_users_products.order_id = $2
`

type GetOrderDetailsParams struct {
	UserID  uuid.UUID
	OrderID uuid.UUID
}

type GetOrderDetailsRow struct {
	Name        string
	Description json.RawMessage
	Price       float64
	ImageUrls   json.RawMessage
	Quantity    int32
}

func (q *Queries) GetOrderDetails(ctx context.Context, arg GetOrderDetailsParams) ([]GetOrderDetailsRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrderDetails, arg.UserID, arg.OrderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrderDetailsRow
	for rows.Next() {
		var i GetOrderDetailsRow
		if err := rows.Scan(
			&i.Name,
			&i.Description,
			&i.Price,
			&i.ImageUrls,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
update orders set status = $1 where id = $2
`

type UpdateOrderStatusParams struct {
	Status uuid.UUID
	ID     uuid.UUID
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderStatus, arg.Status, arg.ID)
	return err
}
