// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: customers.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createCustomer = `-- name: CreateCustomer :exec
insert into customers(id, created_at, updated_at)
values(
    $1,
    NOW(),
    NOW()
)
`

func (q *Queries) CreateCustomer(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, createCustomer, id)
	return err
}

const getCustomerAddress = `-- name: GetCustomerAddress :one
select delivery_address, pincode, city, state from customers where id = $1
`

type GetCustomerAddressRow struct {
	DeliveryAddress string
	Pincode         string
	City            uuid.UUID
	State           uuid.UUID
}

func (q *Queries) GetCustomerAddress(ctx context.Context, id uuid.UUID) (GetCustomerAddressRow, error) {
	row := q.db.QueryRowContext(ctx, getCustomerAddress, id)
	var i GetCustomerAddressRow
	err := row.Scan(
		&i.DeliveryAddress,
		&i.Pincode,
		&i.City,
		&i.State,
	)
	return i, err
}

const getCustomerInformation = `-- name: GetCustomerInformation :one
select users.email,
users.phone_number,
customers.delivery_address,
customers.pincode,
customers.city,
customers.state
from customers join users on customers.id == users.id where customers.id = $1
`

type GetCustomerInformationRow struct {
	Email           string
	PhoneNumber     string
	DeliveryAddress string
	Pincode         string
	City            uuid.UUID
	State           uuid.UUID
}

func (q *Queries) GetCustomerInformation(ctx context.Context, id uuid.UUID) (GetCustomerInformationRow, error) {
	row := q.db.QueryRowContext(ctx, getCustomerInformation, id)
	var i GetCustomerInformationRow
	err := row.Scan(
		&i.Email,
		&i.PhoneNumber,
		&i.DeliveryAddress,
		&i.Pincode,
		&i.City,
		&i.State,
	)
	return i, err
}

const updateCustomerAddress = `-- name: UpdateCustomerAddress :one
update customers set delivery_address = $1, pincode = $2, city = $3, state = $4, updated_at = NOW where id = $5
returning id, delivery_address, pincode, city, state, created_at, updated_at
`

type UpdateCustomerAddressParams struct {
	DeliveryAddress string
	Pincode         string
	City            uuid.UUID
	State           uuid.UUID
	ID              uuid.UUID
}

func (q *Queries) UpdateCustomerAddress(ctx context.Context, arg UpdateCustomerAddressParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, updateCustomerAddress,
		arg.DeliveryAddress,
		arg.Pincode,
		arg.City,
		arg.State,
		arg.ID,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.DeliveryAddress,
		&i.Pincode,
		&i.City,
		&i.State,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
