// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: saved_items.sql

package database

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

const addProductToSavedItems = `-- name: AddProductToSavedItems :exec
insert into saved_items(user_id, product_id, created_at, updated_at)
values(
    $1,
    $2,
    NOW(),
    NOW()
)
`

type AddProductToSavedItemsParams struct {
	UserID    uuid.UUID
	ProductID uuid.UUID
}

func (q *Queries) AddProductToSavedItems(ctx context.Context, arg AddProductToSavedItemsParams) error {
	_, err := q.db.ExecContext(ctx, addProductToSavedItems, arg.UserID, arg.ProductID)
	return err
}

const getAllSavedItems = `-- name: GetAllSavedItems :many
select products.name, products.description, products.price, products.image_urls from saved_items join products on saved_items.product_id = products.id where saved_items.user_id = $1
`

type GetAllSavedItemsRow struct {
	Name        string
	Description json.RawMessage
	Price       float64
	ImageUrls   json.RawMessage
}

func (q *Queries) GetAllSavedItems(ctx context.Context, userID uuid.UUID) ([]GetAllSavedItemsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllSavedItems, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllSavedItemsRow
	for rows.Next() {
		var i GetAllSavedItemsRow
		if err := rows.Scan(
			&i.Name,
			&i.Description,
			&i.Price,
			&i.ImageUrls,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeProductFromSavedItems = `-- name: RemoveProductFromSavedItems :exec
delete from saved_items where user_id = $1 and product_id = $2
`

type RemoveProductFromSavedItemsParams struct {
	UserID    uuid.UUID
	ProductID uuid.UUID
}

func (q *Queries) RemoveProductFromSavedItems(ctx context.Context, arg RemoveProductFromSavedItemsParams) error {
	_, err := q.db.ExecContext(ctx, removeProductFromSavedItems, arg.UserID, arg.ProductID)
	return err
}
