// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: carts.sql

package database

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

const addProductToCart = `-- name: AddProductToCart :exec
insert into carts(user_id, product_id, created_at, updated_at)
values(
    $1,
    $2,
    NOW(),
    NOW()
)
`

type AddProductToCartParams struct {
	UserID    uuid.UUID
	ProductID uuid.UUID
}

func (q *Queries) AddProductToCart(ctx context.Context, arg AddProductToCartParams) error {
	_, err := q.db.ExecContext(ctx, addProductToCart, arg.UserID, arg.ProductID)
	return err
}

const emptyCart = `-- name: EmptyCart :exec
delete from carts where user_id = $1
`

func (q *Queries) EmptyCart(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, emptyCart, userID)
	return err
}

const getAllProductsInCart = `-- name: GetAllProductsInCart :many
select products.name, products.description, products.price, products.image_urls from carts join products on carts.product_id = products.id where carts.user_id = $1
`

type GetAllProductsInCartRow struct {
	Name        string
	Description json.RawMessage
	Price       float64
	ImageUrls   json.RawMessage
}

func (q *Queries) GetAllProductsInCart(ctx context.Context, userID uuid.UUID) ([]GetAllProductsInCartRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllProductsInCart, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllProductsInCartRow
	for rows.Next() {
		var i GetAllProductsInCartRow
		if err := rows.Scan(
			&i.Name,
			&i.Description,
			&i.Price,
			&i.ImageUrls,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeProductFromCart = `-- name: RemoveProductFromCart :exec
delete from carts where user_id = $1 and product_id = $2
`

type RemoveProductFromCartParams struct {
	UserID    uuid.UUID
	ProductID uuid.UUID
}

func (q *Queries) RemoveProductFromCart(ctx context.Context, arg RemoveProductFromCartParams) error {
	_, err := q.db.ExecContext(ctx, removeProductFromCart, arg.UserID, arg.ProductID)
	return err
}

const updateProductQuantity = `-- name: UpdateProductQuantity :exec
update carts set quantity = $1 where user_id = $2 and product_id = $3
`

type UpdateProductQuantityParams struct {
	Quantity  int32
	UserID    uuid.UUID
	ProductID uuid.UUID
}

func (q *Queries) UpdateProductQuantity(ctx context.Context, arg UpdateProductQuantityParams) error {
	_, err := q.db.ExecContext(ctx, updateProductQuantity, arg.Quantity, arg.UserID, arg.ProductID)
	return err
}
