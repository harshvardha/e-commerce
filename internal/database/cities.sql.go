// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: cities.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createCity = `-- name: CreateCity :one
insert into cities(id, name, state, created_at, updated_at)
values(
    gen_random_uuid(),
    $1,
    $2,
    NOW(),
    NOW()
)
returning id, name, created_at, updated_at, state
`

type CreateCityParams struct {
	Name  string
	State uuid.UUID
}

func (q *Queries) CreateCity(ctx context.Context, arg CreateCityParams) (City, error) {
	row := q.db.QueryRowContext(ctx, createCity, arg.Name, arg.State)
	var i City
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.State,
	)
	return i, err
}

const getAllCities = `-- name: GetAllCities :many
select id, name, created_at, updated_at, state from cities
`

func (q *Queries) GetAllCities(ctx context.Context) ([]City, error) {
	rows, err := q.db.QueryContext(ctx, getAllCities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []City
	for rows.Next() {
		var i City
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.State,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCityAndState = `-- name: GetCityAndState :one
select cities.name as city_name, states.name as state_name from cities join states on cities.state = states.id where cities.id = $1
`

type GetCityAndStateRow struct {
	CityName  string
	StateName string
}

func (q *Queries) GetCityAndState(ctx context.Context, id uuid.UUID) (GetCityAndStateRow, error) {
	row := q.db.QueryRowContext(ctx, getCityAndState, id)
	var i GetCityAndStateRow
	err := row.Scan(&i.CityName, &i.StateName)
	return i, err
}

const getCityById = `-- name: GetCityById :one
select id, name, created_at, updated_at, state from cities where id = $1
`

func (q *Queries) GetCityById(ctx context.Context, id uuid.UUID) (City, error) {
	row := q.db.QueryRowContext(ctx, getCityById, id)
	var i City
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.State,
	)
	return i, err
}

const removeCity = `-- name: RemoveCity :exec
delete from cities where id = $1
`

func (q *Queries) RemoveCity(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, removeCity, id)
	return err
}

const updateCity = `-- name: UpdateCity :one
update cities set name = $1, state = $2, updated_at = NOW() where id = $3
returning id, name, created_at, updated_at, state
`

type UpdateCityParams struct {
	Name  string
	State uuid.UUID
	ID    uuid.UUID
}

func (q *Queries) UpdateCity(ctx context.Context, arg UpdateCityParams) (City, error) {
	row := q.db.QueryRowContext(ctx, updateCity, arg.Name, arg.State, arg.ID)
	var i City
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.State,
	)
	return i, err
}
