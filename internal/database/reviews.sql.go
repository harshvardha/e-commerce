// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: reviews.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createReview = `-- name: CreateReview :one
insert into reviews(id, description, user_id, product_id, created_at, updated_at)
values(
    gen_random_uuid(),
    $1,
    $2,
    $3,
    NOW(),
    NOW()
)
returning id, description, user_id, product_id, created_at, updated_at
`

type CreateReviewParams struct {
	Description string
	UserID      uuid.UUID
	ProductID   uuid.UUID
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) (Review, error) {
	row := q.db.QueryRowContext(ctx, createReview, arg.Description, arg.UserID, arg.ProductID)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.UserID,
		&i.ProductID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getReviewsByProductID = `-- name: GetReviewsByProductID :many
select id, description, user_id, product_id, created_at, updated_at from reviews where product_id = $1
`

func (q *Queries) GetReviewsByProductID(ctx context.Context, productID uuid.UUID) ([]Review, error) {
	rows, err := q.db.QueryContext(ctx, getReviewsByProductID, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.UserID,
			&i.ProductID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReviewsByUserID = `-- name: GetReviewsByUserID :many
select id, description, user_id, product_id, created_at, updated_at from reviews where user_id = $1
`

func (q *Queries) GetReviewsByUserID(ctx context.Context, userID uuid.UUID) ([]Review, error) {
	rows, err := q.db.QueryContext(ctx, getReviewsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.UserID,
			&i.ProductID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeReview = `-- name: RemoveReview :exec
delete from reviews where id = $1 and user_id = $2
`

type RemoveReviewParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) RemoveReview(ctx context.Context, arg RemoveReviewParams) error {
	_, err := q.db.ExecContext(ctx, removeReview, arg.ID, arg.UserID)
	return err
}

const updateReview = `-- name: UpdateReview :one
update reviews set description = $1, updated_at = NOW() where id = $2 and user_id = $3
returning description, created_at, updated_at
`

type UpdateReviewParams struct {
	Description string
	ID          uuid.UUID
	UserID      uuid.UUID
}

type UpdateReviewRow struct {
	Description string
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) UpdateReview(ctx context.Context, arg UpdateReviewParams) (UpdateReviewRow, error) {
	row := q.db.QueryRowContext(ctx, updateReview, arg.Description, arg.ID, arg.UserID)
	var i UpdateReviewRow
	err := row.Scan(&i.Description, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}
