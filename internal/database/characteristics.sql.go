// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: characteristics.sql

package database

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

const createCharacteristics = `-- name: CreateCharacteristics :one
insert into characteristics(id, description, product_id, created_at, updated_at)
values(
    gen_random_uuid(),
    $1,
    $2,
    NOW(),
    NOW()
)
returning id, description, product_id, created_at, updated_at
`

type CreateCharacteristicsParams struct {
	Description json.RawMessage
	ProductID   uuid.UUID
}

func (q *Queries) CreateCharacteristics(ctx context.Context, arg CreateCharacteristicsParams) (Characteristic, error) {
	row := q.db.QueryRowContext(ctx, createCharacteristics, arg.Description, arg.ProductID)
	var i Characteristic
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.ProductID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllProductCharacteristics = `-- name: GetAllProductCharacteristics :many
select id, description, product_id, created_at, updated_at from characteristics where product_id = $1
`

func (q *Queries) GetAllProductCharacteristics(ctx context.Context, productID uuid.UUID) ([]Characteristic, error) {
	rows, err := q.db.QueryContext(ctx, getAllProductCharacteristics, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Characteristic
	for rows.Next() {
		var i Characteristic
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.ProductID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductCharacteristic = `-- name: GetProductCharacteristic :one
select description from characteristics where id = $1 and product_id = $2
`

type GetProductCharacteristicParams struct {
	ID        uuid.UUID
	ProductID uuid.UUID
}

func (q *Queries) GetProductCharacteristic(ctx context.Context, arg GetProductCharacteristicParams) (json.RawMessage, error) {
	row := q.db.QueryRowContext(ctx, getProductCharacteristic, arg.ID, arg.ProductID)
	var description json.RawMessage
	err := row.Scan(&description)
	return description, err
}

const updateCharacteristics = `-- name: UpdateCharacteristics :one
update characteristics set description = $1, updated_at = NOW() where id = $2 and product_id = $3
returning description
`

type UpdateCharacteristicsParams struct {
	Description json.RawMessage
	ID          uuid.UUID
	ProductID   uuid.UUID
}

func (q *Queries) UpdateCharacteristics(ctx context.Context, arg UpdateCharacteristicsParams) (json.RawMessage, error) {
	row := q.db.QueryRowContext(ctx, updateCharacteristics, arg.Description, arg.ID, arg.ProductID)
	var description json.RawMessage
	err := row.Scan(&description)
	return description, err
}
