// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: stores.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createStore = `-- name: CreateStore :one
insert into Stores(id, name, owner_id, created_at, updated_at)
values (
    gen_random_uuid(),
    $1,
    $2,
    NOW(),
    NOW()
)
returning id, name, owner_id, created_at, updated_at
`

type CreateStoreParams struct {
	Name    string
	OwnerID string
}

func (q *Queries) CreateStore(ctx context.Context, arg CreateStoreParams) (Store, error) {
	row := q.db.QueryRowContext(ctx, createStore, arg.Name, arg.OwnerID)
	var i Store
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteStore = `-- name: DeleteStore :exec
delete from stores where id = $1
`

func (q *Queries) DeleteStore(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteStore, id)
	return err
}

const getStoreInformation = `-- name: GetStoreInformation :one
select name, created_at, updated_at from Stores where id = $1
`

type GetStoreInformationRow struct {
	Name      string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) GetStoreInformation(ctx context.Context, id uuid.UUID) (GetStoreInformationRow, error) {
	row := q.db.QueryRowContext(ctx, getStoreInformation, id)
	var i GetStoreInformationRow
	err := row.Scan(&i.Name, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const updateStoreInformation = `-- name: UpdateStoreInformation :one
update Stores set name = $1, updated_at = NOW() where id = $2
returning name, updated_at
`

type UpdateStoreInformationParams struct {
	Name string
	ID   uuid.UUID
}

type UpdateStoreInformationRow struct {
	Name      string
	UpdatedAt time.Time
}

func (q *Queries) UpdateStoreInformation(ctx context.Context, arg UpdateStoreInformationParams) (UpdateStoreInformationRow, error) {
	row := q.db.QueryRowContext(ctx, updateStoreInformation, arg.Name, arg.ID)
	var i UpdateStoreInformationRow
	err := row.Scan(&i.Name, &i.UpdatedAt)
	return i, err
}
